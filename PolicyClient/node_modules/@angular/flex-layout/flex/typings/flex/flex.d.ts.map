{"version":3,"file":"flex.d.ts","sources":["/Users/abhishekkargawal/Documents/Nupur/policies-list/PolicyClient/node_modules/@angular/flex-layout/flex/typings/flex/flex.d.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { BaseDirective, LayoutConfigOptions, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';\nimport { Subscription } from 'rxjs';\nimport { Layout, LayoutDirective } from '../layout/layout';\n/** Built-in aliases for different flex-basis values. */\nexport declare type FlexBasisAlias = 'grow' | 'initial' | 'auto' | 'none' | 'nogrow' | 'noshrink';\n/**\n * Directive to control the size of a flex item using flex-basis, flex-grow, and flex-shrink.\n * Corresponds to the css `flex` shorthand property.\n *\n * @see https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n */\nexport declare class FlexDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {\n    protected _container: LayoutDirective;\n    protected styleUtils: StyleUtils;\n    protected layoutConfig: LayoutConfigOptions;\n    /** The flex-direction of this element's flex container. Defaults to 'row'. */\n    protected _layout?: Layout;\n    /**\n     * Subscription to the parent flex container's layout changes.\n     * Stored so we can unsubscribe when this directive is destroyed.\n     */\n    protected _layoutWatcher?: Subscription;\n    shrink: string;\n    grow: string;\n    flex: string;\n    flexXs: string;\n    flexSm: string;\n    flexMd: string;\n    flexLg: string;\n    flexXl: string;\n    flexGtXs: string;\n    flexGtSm: string;\n    flexGtMd: string;\n    flexGtLg: string;\n    flexLtSm: string;\n    flexLtMd: string;\n    flexLtLg: string;\n    flexLtXl: string;\n    constructor(monitor: MediaMonitor, elRef: ElementRef, _container: LayoutDirective, styleUtils: StyleUtils, layoutConfig: LayoutConfigOptions);\n    /**\n     * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * After the initial onChanges, build an mqActivation object that bridges\n     * mql change events to onMediaQueryChange handlers\n     */\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Caches the parent container's 'flex-direction' and updates the element's style.\n     * Used as a handler for layout change events from the parent flex container.\n     */\n    protected _onLayoutChange(layout?: Layout): void;\n    protected _updateStyle(value?: string | number): void;\n    /**\n     * Validate the value to be one of the acceptable value options\n     * Use default fallback of 'row'\n     */\n    protected _validateValue(grow: number | string, shrink: number | string, basis: string | number | FlexBasisAlias): any;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;"}