{"version":3,"file":"layout.d.ts","sources":["/Users/abhishekkargawal/Documents/Nupur/policies-list/PolicyClient/node_modules/@angular/flex-layout/flex/typings/layout/layout.d.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nexport declare type Layout = {\n    direction: string;\n    wrap: boolean;\n};\n/**\n * 'layout' flexbox styling directive\n * Defines the positioning flow direction for the child elements: row or column\n * Optional values: column or row (default)\n * @see https://css-tricks.com/almanac/properties/f/flex-direction/\n *\n */\nexport declare class LayoutDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {\n    /**\n     * Create Observable for nested/child 'flex' directives. This allows\n     * child flex directives to subscribe/listen for flexbox direction changes.\n     */\n    protected _announcer: ReplaySubject<Layout>;\n    /**\n     * Publish observer to enabled nested, dependent directives to listen\n     * to parent 'layout' direction changes\n     */\n    layout$: Observable<Layout>;\n    layout: string;\n    layoutXs: string;\n    layoutSm: string;\n    layoutMd: string;\n    layoutLg: string;\n    layoutXl: string;\n    layoutGtXs: string;\n    layoutGtSm: string;\n    layoutGtMd: string;\n    layoutGtLg: string;\n    layoutLtSm: string;\n    layoutLtMd: string;\n    layoutLtLg: string;\n    layoutLtXl: string;\n    constructor(monitor: MediaMonitor, elRef: ElementRef, styleUtils: StyleUtils);\n    /**\n     * On changes to any @Input properties...\n     * Default to use the non-responsive Input value ('fxLayout')\n     * Then conditionally override with the mq-activated Input's current value\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * After the initial onChanges, build an mqActivation object that bridges\n     * mql change events to onMediaQueryChange handlers\n     */\n    ngOnInit(): void;\n    /** Validate the direction value and then update the host's inline flexbox styles */\n    protected _updateWithDirection(value?: string): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;"}