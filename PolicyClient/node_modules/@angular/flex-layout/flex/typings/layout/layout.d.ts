/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
import { Observable, ReplaySubject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare type Layout = {
    direction: string;
    wrap: boolean;
};
/**
 * 'layout' flexbox styling directive
 * Defines the positioning flow direction for the child elements: row or column
 * Optional values: column or row (default)
 * @see https://css-tricks.com/almanac/properties/f/flex-direction/
 *
 */
export declare class LayoutDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {
    /**
     * Create Observable for nested/child 'flex' directives. This allows
     * child flex directives to subscribe/listen for flexbox direction changes.
     */
    protected _announcer: ReplaySubject<Layout>;
    /**
     * Publish observer to enabled nested, dependent directives to listen
     * to parent 'layout' direction changes
     */
    layout$: Observable<Layout>;
    layout: string;
    layoutXs: string;
    layoutSm: string;
    layoutMd: string;
    layoutLg: string;
    layoutXl: string;
    layoutGtXs: string;
    layoutGtSm: string;
    layoutGtMd: string;
    layoutGtLg: string;
    layoutLtSm: string;
    layoutLtMd: string;
    layoutLtLg: string;
    layoutLtXl: string;
    constructor(monitor: MediaMonitor, elRef: ElementRef, styleUtils: StyleUtils);
    /**
     * On changes to any @Input properties...
     * Default to use the non-responsive Input value ('fxLayout')
     * Then conditionally override with the mq-activated Input's current value
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ngOnInit(): void;
    /** Validate the direction value and then update the host's inline flexbox styles */
    protected _updateWithDirection(value?: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LayoutDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LayoutDirective, "  [fxLayout],  [fxLayout.xs], [fxLayout.sm], [fxLayout.md], [fxLayout.lg], [fxLayout.xl],  [fxLayout.lt-sm], [fxLayout.lt-md], [fxLayout.lt-lg], [fxLayout.lt-xl],  [fxLayout.gt-xs], [fxLayout.gt-sm], [fxLayout.gt-md], [fxLayout.gt-lg]", never, {
    "layout": "fxLayout";
    "layoutXs": "fxLayout.xs";
    "layoutSm": "fxLayout.sm";
    "layoutMd": "fxLayout.md";
    "layoutLg": "fxLayout.lg";
    "layoutXl": "fxLayout.xl";
    "layoutGtXs": "fxLayout.gt-xs";
    "layoutGtSm": "fxLayout.gt-sm";
    "layoutGtMd": "fxLayout.gt-md";
    "layoutGtLg": "fxLayout.gt-lg";
    "layoutLtSm": "fxLayout.lt-sm";
    "layoutLtMd": "fxLayout.lt-md";
    "layoutLtLg": "fxLayout.lt-lg";
    "layoutLtXl": "fxLayout.lt-xl";
}, {}, never>;
}

//# sourceMappingURL=layout.d.ts.map