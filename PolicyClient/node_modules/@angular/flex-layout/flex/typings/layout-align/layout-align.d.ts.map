{"version":3,"file":"layout-align.d.ts","sources":["/Users/abhishekkargawal/Documents/Nupur/policies-list/PolicyClient/node_modules/@angular/flex-layout/flex/typings/layout-align/layout-align.d.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';\nimport { Subscription } from 'rxjs';\nimport { Layout, LayoutDirective } from '../layout/layout';\n/**\n * 'layout-align' flexbox styling directive\n *  Defines positioning of child elements along main and cross axis in a layout container\n *  Optional values: {main-axis} values or {main-axis cross-axis} value pairs\n *\n *  @see https://css-tricks.com/almanac/properties/j/justify-content/\n *  @see https://css-tricks.com/almanac/properties/a/align-items/\n *  @see https://css-tricks.com/almanac/properties/a/align-content/\n */\nexport declare class LayoutAlignDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {\n    protected _layout: string;\n    protected _layoutWatcher?: Subscription;\n    align: string;\n    alignXs: string;\n    alignSm: string;\n    alignMd: string;\n    alignLg: string;\n    alignXl: string;\n    alignGtXs: string;\n    alignGtSm: string;\n    alignGtMd: string;\n    alignGtLg: string;\n    alignLtSm: string;\n    alignLtMd: string;\n    alignLtLg: string;\n    alignLtXl: string;\n    constructor(monitor: MediaMonitor, elRef: ElementRef, container: LayoutDirective, styleUtils: StyleUtils);\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * After the initial onChanges, build an mqActivation object that bridges\n     * mql change events to onMediaQueryChange handlers\n     */\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     *\n     */\n    protected _updateWithValue(value?: string): void;\n    /**\n     * Cache the parent container 'flex-direction' and update the 'flex' styles\n     */\n    protected _onLayoutChange(layout: Layout): void;\n    protected _buildCSS(align?: string): any;\n    /**\n     * Update container element to 'stretch' as needed...\n     * NOTE: this is only done if the crossAxis is explicitly set to 'stretch'\n     */\n    protected _allowStretching(align?: string, layout?: string): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;"}