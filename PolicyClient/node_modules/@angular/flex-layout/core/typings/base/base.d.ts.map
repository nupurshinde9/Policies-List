{"version":3,"file":"base.d.ts","sources":["/Users/abhishekkargawal/Documents/Nupur/policies-list/PolicyClient/node_modules/@angular/flex-layout/core/typings/base/base.d.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnDestroy, SimpleChanges, OnChanges } from '@angular/core';\nimport { StyleDefinition, StyleUtils } from '../style-utils/style-utils';\nimport { ResponsiveActivation } from '../responsive-activation/responsive-activation';\nimport { MediaMonitor } from '../media-monitor/media-monitor';\nimport { MediaQuerySubscriber } from '../media-change';\n/** Abstract base class for the Layout API styling directives. */\nexport declare abstract class BaseDirective implements OnDestroy, OnChanges {\n    protected _mediaMonitor: MediaMonitor;\n    protected _elementRef: ElementRef;\n    protected _styler: StyleUtils;\n    readonly hasMediaQueryListener: boolean;\n    /**\n     * Imperatively determine the current activated [input] value;\n     * if called before ngOnInit() this will return `undefined`\n     */\n    /**\n    * Change the currently activated input value and force-update\n    * the injected CSS (by-passing change detection).\n    *\n    * NOTE: Only the currently activated input value will be modified;\n    *       other input values will NOT be affected.\n    */\n    activatedValue: string | number;\n    protected constructor(_mediaMonitor: MediaMonitor, _elementRef: ElementRef, _styler: StyleUtils);\n    /**\n     * Does this directive have 1 or more responsive keys defined\n     * Note: we exclude the 'baseKey' key (which is NOT considered responsive)\n     */\n    hasResponsiveAPI(baseKey: string): boolean;\n    /**\n     * Use post-component-initialization event to perform extra\n     * querying such as computed Display style\n     */\n    ngOnInit(): void;\n    ngOnChanges(change: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /** Access to host element's parent DOM node */\n    protected readonly parentElement: any;\n    protected readonly nativeElement: HTMLElement;\n    /** Access the current value (if any) of the @Input property */\n    protected _queryInput(key: string): any;\n    /**\n     * Was the directive's default selector used ?\n     * If not, use the fallback value!\n     */\n    protected _getDefaultVal(key: string, fallbackVal: any): string | boolean;\n    /**\n     * Quick accessor to the current HTMLElement's `display` style\n     * Note: this allows us to preserve the original style\n     * and optional restore it when the mediaQueries deactivate\n     */\n    protected _getDisplayStyle(source?: HTMLElement): string;\n    /** Quick accessor to raw attribute value on the target DOM element */\n    protected _getAttributeValue(attribute: string, source?: HTMLElement): string;\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     */\n    protected _getFlexFlowDirection(target: HTMLElement, addIfMissing?: boolean): string;\n    /** Applies styles given via string pair or object map to the directive element */\n    protected _applyStyleToElement(style: StyleDefinition, value?: string | number, element?: HTMLElement): void;\n    /** Applies styles given via string pair or object map to the directive's element */\n    protected _applyStyleToElements(style: StyleDefinition, elements: HTMLElement[]): void;\n    /**\n     *  Save the property value; which may be a complex object.\n     *  Complex objects support property chains\n     */\n    protected _cacheInput(key?: string, source?: any): void;\n    /**\n     *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n     *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n     *  (or closest match).\n     */\n    protected _listenForMediaQueryChanges(key: string, defaultValue: any, onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation;\n    /** Special accessor to query for all child 'element' nodes regardless of type, class, etc */\n    protected readonly childrenNodes: any[];\n    /** Fast validator for presence of attribute on the host element */\n    protected hasKeyValue(key: string): boolean;\n    protected readonly hasInitialized: boolean;\n    /** MediaQuery Activation Tracker */\n    protected _mqActivation?: ResponsiveActivation;\n    /** Dictionary of input keys with associated values */\n    protected _inputMap: {\n        [key: string]: any;\n    };\n    /**\n     * Has the `ngOnInit()` method fired\n     *\n     * Used to allow *ngFor tasks to finish and support queries like\n     * getComputedStyle() during ngOnInit().\n     */\n    protected _hasInitialized: boolean;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFA;"}