{"version":3,"file":"server-match-media.d.ts","sources":["/Users/abhishekkargawal/Documents/Nupur/policies-list/PolicyClient/node_modules/@angular/flex-layout/core/typings/match-media/server-match-media.d.ts"],"sourcesContent":["import { NgZone } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { BreakPoint } from '../breakpoints/break-point';\nimport { MatchMedia } from './match-media';\nimport { MediaChange } from '../media-change';\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport declare class ServerMediaQueryList implements MediaQueryList {\n    private _mediaQuery;\n    private _isActive;\n    private _listeners;\n    readonly matches: boolean;\n    readonly media: string;\n    constructor(_mediaQuery: string);\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     */\n    destroy(): void;\n    /** Notify all listeners that 'matches === TRUE' */\n    activate(): ServerMediaQueryList;\n    /** Notify all listeners that 'matches === false' */\n    deactivate(): ServerMediaQueryList;\n    /** Add a listener to our internal list to activate later */\n    addListener(listener: MediaQueryListListener): void;\n    /** Don't need to remove listeners in the server environment */\n    removeListener(_: EventListenerOrEventListenerObject | null): void;\n    addEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | AddEventListenerOptions): void;\n    removeEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | EventListenerOptions): void;\n    dispatchEvent(_: Event): boolean;\n    onchange: MediaQueryListListener;\n}\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\nexport declare class ServerMatchMedia extends MatchMedia {\n    protected _zone: NgZone;\n    protected _platformId: Object;\n    protected _document: any;\n    protected _registry: Map<string, ServerMediaQueryList>;\n    protected _source: BehaviorSubject<MediaChange>;\n    protected _observable$: Observable<MediaChange>;\n    constructor(_zone: NgZone, _platformId: Object, _document: any);\n    /** Activate the specified breakpoint if we're on the server, no-op otherwise */\n    activateBreakpoint(bp: BreakPoint): void;\n    /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */\n    deactivateBreakpoint(bp: BreakPoint): void;\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    protected _buildMQL(query: string): ServerMediaQueryList;\n}\ndeclare type MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\nexport {};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;"}