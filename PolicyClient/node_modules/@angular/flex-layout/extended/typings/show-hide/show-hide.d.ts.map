{"version":3,"file":"show-hide.d.ts","sources":["/Users/abhishekkargawal/Documents/Nupur/policies-list/PolicyClient/node_modules/@angular/flex-layout/extended/typings/show-hide/show-hide.d.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';\nimport { Subscription } from 'rxjs';\nimport { LayoutDirective } from '@angular/flex-layout/flex';\n/**\n * For fxHide selectors, we invert the 'value'\n * and assign to the equivalent fxShow selector cache\n *  - When 'hide' === '' === true, do NOT show the element\n *  - When 'hide' === false or 0... we WILL show the element\n */\nexport declare function negativeOf(hide: any): boolean;\n/**\n * 'show' Layout API directive\n *\n */\nexport declare class ShowHideDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {\n    protected layout: LayoutDirective;\n    protected elRef: ElementRef;\n    protected styleUtils: StyleUtils;\n    protected platformId: Object;\n    protected serverModuleLoaded: boolean;\n    /**\n     * Subscription to the parent flex container's layout changes.\n     * Stored so we can unsubscribe when this directive is destroyed.\n     */\n    protected _layoutWatcher?: Subscription;\n    /** Original dom Elements CSS display style */\n    protected _display: string;\n    show: string;\n    showXs: string;\n    showSm: string;\n    showMd: string;\n    showLg: string;\n    showXl: string;\n    showLtSm: string;\n    showLtMd: string;\n    showLtLg: string;\n    showLtXl: string;\n    showGtXs: string;\n    showGtSm: string;\n    showGtMd: string;\n    showGtLg: string;\n    hide: string;\n    hideXs: string;\n    hideSm: string;\n    hideMd: string;\n    hideLg: string;\n    hideXl: string;\n    hideLtSm: string;\n    hideLtMd: string;\n    hideLtLg: string;\n    hideLtXl: string;\n    hideGtXs: string;\n    hideGtSm: string;\n    hideGtMd: string;\n    hideGtLg: string;\n    constructor(monitor: MediaMonitor, layout: LayoutDirective, elRef: ElementRef, styleUtils: StyleUtils, platformId: Object, serverModuleLoaded: boolean);\n    /**\n     * Override accessor to the current HTMLElement's `display` style\n     * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'\n     * unless it was already explicitly specified inline or in a CSS stylesheet.\n     */\n    protected _getDisplayStyle(): string;\n    /**\n     * On changes to any @Input properties...\n     * Default to use the non-responsive Input value ('fxShow')\n     * Then conditionally override with the mq-activated Input's current value\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * After the initial onChanges, build an mqActivation object that bridges\n     * mql change events to onMediaQueryChange handlers\n     */\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Validate the visibility value and then update the host's inline display style */\n    protected _updateWithValue(value?: string | number | boolean): void;\n    /** Build the CSS that should be assigned to the element instance */\n    protected _buildCSS(show: boolean): {\n        'display': string;\n    };\n    /**  Validate the to be not FALSY */\n    _validateTruthy(show?: string | number | boolean): boolean;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;"}