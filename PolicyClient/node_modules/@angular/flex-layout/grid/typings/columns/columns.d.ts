/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { BaseDirective, MediaMonitor, StyleUtils } from '@angular/flex-layout/core';
/**
 * 'grid-template-columns' CSS Grid styling directive
 * Configures the sizing for the columns in the grid
 * Syntax: <column value> [auto]
 * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13
 */
import * as ɵngcc0 from '@angular/core';
export declare class GridColumnsDirective extends BaseDirective implements OnInit, OnChanges, OnDestroy {
    align: string;
    alignXs: string;
    alignSm: string;
    alignMd: string;
    alignLg: string;
    alignXl: string;
    alignGtXs: string;
    alignGtSm: string;
    alignGtMd: string;
    alignGtLg: string;
    alignLtSm: string;
    alignLtMd: string;
    alignLtLg: string;
    alignLtXl: string;
    inline: string;
    constructor(monitor: MediaMonitor, elRef: ElementRef, styleUtils: StyleUtils);
    /**
     * For @Input changes on the current mq activation property, see onMediaQueryChanges()
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ngOnInit(): void;
    protected _updateWithValue(value?: string): void;
    protected _buildCSS(value?: string): {
        'display': string;
        'grid-auto-columns': string;
        'grid-template-columns': string;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridColumnsDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<GridColumnsDirective, "  [gdColumns],  [gdColumns.xs], [gdColumns.sm], [gdColumns.md], [gdColumns.lg], [gdColumns.xl],  [gdColumns.lt-sm], [gdColumns.lt-md], [gdColumns.lt-lg], [gdColumns.lt-xl],  [gdColumns.gt-xs], [gdColumns.gt-sm], [gdColumns.gt-md], [gdColumns.gt-lg]", never, {
    "align": "gdColumns";
    "alignXs": "gdColumns.xs";
    "alignSm": "gdColumns.sm";
    "alignMd": "gdColumns.md";
    "alignLg": "gdColumns.lg";
    "alignXl": "gdColumns.xl";
    "alignGtXs": "gdColumns.gt-xs";
    "alignGtSm": "gdColumns.gt-sm";
    "alignGtMd": "gdColumns.gt-md";
    "alignGtLg": "gdColumns.gt-lg";
    "alignLtSm": "gdColumns.lt-sm";
    "alignLtMd": "gdColumns.lt-md";
    "alignLtLg": "gdColumns.lt-lg";
    "alignLtXl": "gdColumns.lt-xl";
    "inline": "gdInline";
}, {}, never>;
}

//# sourceMappingURL=columns.d.ts.map