{"version":3,"sources":["/Users/abhishekkargawal/Documents/Nupur/policies-list/PolicyClient/node_modules/@angular/flex-layout/esm2015/flex-layout.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0DC,kDAMC;;;;;;;;;;;;;;;;;;;;;kCAKA","file":"flex-layout.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Version, Inject, NgModule, Optional, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { SERVER_TOKEN, LAYOUT_CONFIG, BREAKPOINT } from '@angular/flex-layout/core';\nexport { removeStyles, BROWSER_PROVIDER, CLASS_NAME, CoreModule, MediaChange, StylesheetMap, DEFAULT_CONFIG, LAYOUT_CONFIG, SERVER_TOKEN, BREAKPOINT, BaseDirective, BaseDirectiveAdapter, RESPONSIVE_ALIASES, DEFAULT_BREAKPOINTS, ScreenTypes, ORIENTATION_BREAKPOINTS, BreakPointRegistry, BREAKPOINTS, MatchMedia, MockMatchMedia, MockMediaQueryList, MockMatchMediaProvider, ServerMediaQueryList, ServerMatchMedia, MediaMonitor, ObservableMedia, MediaService, ObservableMediaProvider, KeyOptions, ResponsiveActivation, StyleUtils, validateBasis } from '@angular/flex-layout/core';\nimport { ExtendedModule } from '@angular/flex-layout/extended';\nexport { ExtendedModule, ClassDirective, ImgSrcDirective, negativeOf, ShowHideDirective, StyleDirective } from '@angular/flex-layout/extended';\nimport { FlexModule } from '@angular/flex-layout/flex';\nexport { FlexModule, FlexDirective, FlexAlignDirective, FlexFillDirective, FlexOffsetDirective, FlexOrderDirective, LayoutDirective, LayoutAlignDirective, LayoutGapDirective } from '@angular/flex-layout/flex';\nimport { GridModule } from '@angular/flex-layout/grid';\nexport { ɵb, ɵc, ɵd, ɵe, ɵf, ɵg, ɵh, ɵi, ɵa, ɵj, ɵk, GridModule } from '@angular/flex-layout/grid';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Current version of Angular Flex-Layout.\n  @type {?} */\nconst VERSION = new Version('7.0.0-beta.19');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * FlexLayoutModule -- the main import for all utilities in the Angular Layout library\n * * Will automatically provide Flex, Grid, and Extended modules for use in the application\n * * Can be configured using the static withConfig method, options viewable on the Wiki's\n *   Configuration page\n */\nclass FlexLayoutModule {\n    /**\n     * @param {?} serverModuleLoaded\n     * @param {?} platformId\n     */\n    constructor(serverModuleLoaded, platformId) {\n        if (isPlatformServer(platformId) && !serverModuleLoaded) {\n            console.warn('Warning: Flex Layout loaded on the server without FlexLayoutServerModule');\n        }\n    }\n    /**\n     * Initialize the FlexLayoutModule with a set of config options,\n     * which sets the corresponding tokens accordingly\n     * @param {?} configOptions\n     * @param {?=} breakpoints\n     * @return {?}\n     */\n    static withConfig(configOptions, breakpoints = []) {\n        return {\n            ngModule: FlexLayoutModule,\n            providers: configOptions.serverLoaded ?\n                [\n                    { provide: LAYOUT_CONFIG, useValue: configOptions },\n                    { provide: BREAKPOINT, useValue: breakpoints, multi: true },\n                    { provide: SERVER_TOKEN, useValue: true },\n                ] : [\n                { provide: LAYOUT_CONFIG, useValue: configOptions },\n                { provide: BREAKPOINT, useValue: breakpoints, multi: true },\n            ]\n        };\n    }\n}\nFlexLayoutModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [FlexModule, ExtendedModule, GridModule],\n                exports: [FlexModule, ExtendedModule, GridModule]\n            },] },\n];\n/** @nocollapse */\nFlexLayoutModule.ctorParameters = () => [\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [SERVER_TOKEN,] }] },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { VERSION, FlexLayoutModule };\n"]}